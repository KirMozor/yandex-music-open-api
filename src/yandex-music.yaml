openapi: 3.0.1
info:
  title: Yandex Music Api
  description: "Swagger документация для Yandex Music API."
  version: 1.0.0
servers:
  - url: https://api.music.yandex.net:443/
  - url: http://api.music.yandex.net:443/
tags:
  - name: "user"
  - name: "tracks"
  - name: "albums"
  - name: "playlists"
  - name: "landing"
  - name: "artists"
  - name: "rotor"

paths:
  /account/settings:
    description: Получение настроек текущего пользователя
    get:
      tags: 
        - account
      security:
        - oAuth: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  invocationInfo:
                    type: object
                    $ref: '#/components/schemas/InvocationInfo'
                  result:
                    type: object
                    $ref: '#components/schemas/UserSettings'

  /account/status:
    description: Get account status for current user
    get:
      tags:
        - "account"
      security:
        - oAuth: []
      responses:
        200:
          description: Ok
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  invocationInfo:
                    type: object
                    $ref: '#/components/schemas/InvocationInfo'
                  result:
                    type: object
                    $ref: '#/components/schemas/Status'
        400:
          description: Bad Request
          content: {}
  /feed:
    get:
      security:
        - oAuth: []
      responses:
        200:
          description: Ok
          content: {}

  /albums/{albumId}/:
    parameters:
      - in: path
        name: albumId
        schema:
          type: number
        required: true
        example: 7019818
    get:
      tags:
        - "albums"
      responses:
        200:
          description: Ok
          content: {}

  /albums/{albumId}/with-tracks:
    parameters:
      - in: path
        name: albumId
        schema:
          type: number
        required: true
        example: 7019818
    get:
      tags:
        - "albums"
      responses:
        200:
          description: Ok
          content: {}

  /albums:
    post:
      tags:
        - "albums"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
            example: '{"album-ids" : "13984185,13730064,13963354,13546288,13937809"}'
      responses:
        200:
          description: Ok
          content: {}

  /landing3:
    parameters:
      - in: query
        name: blocks
        schema:
          type: string
          description: Одно или несколько значений блоков, разделенных запятой "promotions","new-releases","new-playlists","mixes","chart","playlists","play_contexts","podcasts"
        examples:
          single:
            value: "new-releases"
          multiple:
            value: "new-playlists, new-playlists"
    get:
      tags:
        - "landing"
      security:
        - oAuth: []
      responses:
        200:
          description: Ok
          content: {}
          headers:
            "X-Yandex-Music-Device":
              schema:
                type: string
                description: Данные заголовок использует Windows приложение Yandex.Music, если пользователь не авторизован
                example: "os=unknown; os_version=unknown; manufacturer=unknown; model=unknown; clid=; device_id=unknown; uuid=unknown"

  /landing3/{landingBlock}:
    parameters:
      - in: path
        name: landingBlock
        required: true
        schema:
          type: string
          enum:
            [
              "new-playlists",
              "new-releases",
              "new-playlists",
              "chart",
              "podcasts",
            ]

  /landing3/chart/{chartType}:
    parameters:
      - in: path
        name: chartType
        required: true
        schema:
          type: string
          enum: ["russia", "world"]
    get:
      tags:
        - "landing"
      responses:
        200:
          description: Ok
          content: {}

  /genres:
    get:
      responses:
        200:
          description: Ok
          content: {}

  /playlists/list:
    description: Получение полной информации о плейлистах по их идентификатору
    parameters:
      - in: query
        name: playlistIds
        description: uid владельца плейлиста и kind плейлиста через двоеточие и запятую
        schema:
          type: string
          example: 103372440:1878,460140864:1000
    post:
      tags:
        - "playlists"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
              example: '{"playlistIds": "103372440:1878,460140864:1000"}'
      responses:
        200:
          description: Ok
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  invocationInfo:
                    type: object
                    $ref: '#/components/schemas/InvocationInfo'
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Playlist'
        400:
          description: Bad Request
          content: {}

  /search:
    parameters:
      - in: query
        name: text
        description: Текст запроса
        schema:
          type: string
          example: Король и Шут
      - in: query
        name: page
        description: Номер страницы выдачи
        schema:
          type: number
          example: 0
      - in: query
        name: type
        schema:
          type: string
          enum: ["artist", "album", "track", "podcast", "all"]
          default: "all"
      - in: query
        name: nococrrect
        schema:
          type: boolean
          default: false
    get:
      responses:
        200:
          description: Ok
          content: {}

  /users/{userId}/playlists/list:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
    get:
      tags:
        - "user"
        - "playlists"
      security:
        - oAuth: []
      responses:
        200:
          description: Ok
          content: {}
        405:
          description: "Method Not Allowed"
          content: {}

  /users/{userId}/playlists/{kind}:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
      - in: path
        required: true
        name: kind
        description: Идентификатор плейлиста
        schema:
          type: number
          example: 1000
    get:
      tags:
        - "user"
        - "playlists"
      security:
        - oAuth: []
      responses:
        200:
          description: Ok
          content: {}

  /users/{userId}/playlists:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
      - in: query
        required: true
        name: kinds
        schema:
          type: string
          example: "1000,1003"
      - in: query
        required: true
        name: mixed
        schema:
          type: boolean
          example: false
      - in: query
        required: true
        name: rich-tracks
        schema:
          type: boolean
          example: false
    get:
      tags:
        - "user"
        - "playlists"
      security:
        - oAuth: []
      responses:
        200:
          description: Ok
          content: {}

  /users/{userId}/playlists/create:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
    post:
      tags:
        - "user"
        - "playlists"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
              example: '{"title" : "Название плейлиста", "visibility": "public"}'
      responses:
        200:
          description: Ok
        400:
          description: Bad Request
        401:
          description: Unauthorized

  /users/{userId}/playlists/{kind}/name:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
      - in: path
        required: true
        name: kind
        description: Идентификатор плейлиста
        schema:
          type: number
          example: 1000
    post:
      tags:
        - "user"
        - "playlists"
      security:
        - oAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
            # TODO: test
            example: '{"value" : "new-name"}'
      responses:
        200:
          description: Ok
          content: {}

  /users/{userId}/playlists/{kind}/delete:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
      - in: path
        required: true
        name: kind
        description: Идентификатор плейлиста
        schema:
          type: number
          example: 1000
    delete:
      tags:
        - "user"
        - "playlists"
      security:
        - oAuth: []
      responses:
        200:
          description: Ok
          content: {}

  # TODO: Complete
  /users/{userId}/playlists/{kind}/change-relative:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
      - in: path
        required: true
        name: kind
        description: Идентификатор плейлиста
        schema:
          type: number
          example: 1000
    post:
      tags:
        - "user"
        - "playlists"
      responses:
        200:
          description: Ok
          content: {}

  /users/{userId}/likes/tracks/add-multiple:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
    post:
      tags:
        - "user"
        - "tracks"
      security:
        - oAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
            example: '{"track-ids" : "7019818,29238706"}'
      responses:
        200:
          description: Ok
          content: {}
        401:
          description: Unauthorized
          content: {}

  /users/{userId}/likes/tracks/remove:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
    post:
      tags:
        - "user"
        - "tracks"
      security:
        - oAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
            example: '{"track-ids" : "7019818,29238706"}'
      responses:
        200:
          description: Ok
          content: {}
        401:
          description: Unauthorized
          content: {}

  /users/{userId}/likes/tracks:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
    get:
      tags:
        - "user"
        - "tracks"
      responses:
        200:
          description: Ok
          content: {}

  /tracks/:
    post:
      tags:
        - "tracks"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
              example: '{"track-ids": "7019818,29238706", "with-positions": false}'
      responses:
        200:
          description: Ok
          content: {}
        400:
          description: Bad Request
          content: {}

  /tracks/{trackId}/download-info:
    parameters:
      - in: path
        required: true
        name: trackId
        schema:
          type: string
          example: "78550148"
    get:
      tags:
        - "user"
        - "tracks"
      responses:
        200:
          description: Ok
          content: {}

  /artists/{artistId}/track-ids-by-rating:
    parameters:
      - in: path
        required: true
        name: artistId
        schema:
          type: string
          example: 218099
    get:
      tags:
        - "artists"
      responses:
        200:
          description: Ok
          content: {}

  /artists/{artistId}/brief-info:
    parameters:
      - in: path
        required: true
        name: artistId
        schema:
          type: string
          example: 218099
    get:
      tags:
        - "artists"
      responses:
        200:
          description: Ok
          content: {}

  /artists/{artistId}/tracks:
    parameters:
      - in: path
        required: true
        name: artistId
        schema:
          type: string
          example: 218099
      - in: query
        required: false
        name: page
        schema:
          type: number
          example: 0
      - in: query
        required: false
        name: page-size
        schema:
          type: number
          example: 20
    get:
      tags:
        - "artists"
      responses:
        200:
          description: Ok
          content: {}

  /artists/{artistId}/direct-albums:
    parameters:
      - in: path
        required: true
        name: artistId
        schema:
          type: string
          example: 218099
      - in: query
        required: false
        name: page
        schema:
          type: number
          example: 0
      - in: query
        required: false
        name: page-size
        schema:
          type: number
          example: 20
      - in: query
        required: false
        name: sort-by
        schema:
          type: string
          enum:
            - "year"
            - "rating"
    get:
      tags:
        - "artists"
      responses:
        200:
          description: Ok
          content: {}

  /rotor/account/status:
    description: "Получение статуса пользователя с дополнителными полями"
    get: 
      tags: 
        - "rotor"
        - "account"
      security:
        - oAuth: []
      responses:
        200:
          description: Ok
          content: {}
        400:
          description: Bad request
          content: {}

  /rotor/stations/list:
    description: "Получение всех радиостанций с настройками пользователя"
    parameters:
      - in: query
        required: false
        name: language
        description: "Язык, на котором будет информация о станциях"
        schema:
          type: string
          example: ru
    get:
      tags:
        - "rotor"
      responses:
        200:
          description: Ok
          content: {}

  /rotor/stations/dashboard:
    description: "Получение рекомендованных станций текущего пользователя"
    get: 
      security:
          - oAuth: []
      tags:
        - "rotor"
      responses:
        200:
          description: Ok
          content: {}
  
  /rotor/station/{station}/feedback:
    description: "Отправка ответной реакции на происходящее при прослушивании радио. Сообщения о начале прослушивания радио, начале и конце трека, его пропуска."
    parameters:
      - in: path
        required: true
        name: station
        description: Станция
        schema:
          type: string
    post:
      tags:
          - "rotor"
      requestBody:
        required: true
        content:
          # TODO: complete parameters 
          application/x-www-form-urlencoded:
            schema:
              type: string
              example: ''
      responses:
        200:
          description: Ok
          content: {}

components:
  securitySchemes:
    oAuth:
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        password:
          tokenUrl: https://oauth.yandex.ru/token
          scopes: {}
  schemas:
    UserSettings:
      $ref: './models/UserSettings.yaml'
    InvocationInfo:
      $ref: './models/InvocationInfo.yaml'
    Account:
      $ref: './models/Account.yaml'
    Album:
      $ref: './models/Album.yaml'
    Artist:
      $ref: './models/Artist.yaml'
    Cover:
      $ref: './models/Cover.yaml'
    Owner:
      $ref: './models/Owner.yaml'
    Track:
      $ref: './models/Track.yaml'
    TrackItem:
      $ref: './models/TrackItem.yaml'
    Playlist: 
      $ref: './models/Playlist.yaml'
    Status:
      $ref: './models/Status.yaml'
    Permissions:
      $ref: './models/Permissions.yaml'
    Subscription:
      $ref: './models/Subscription.yaml'
    Alert:
      $ref: './models/Alert.yaml'
    AlertButton:
      $ref: './models/AlertButton.yaml'