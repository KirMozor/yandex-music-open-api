openapi: 3.0.1
info:
  title: Yandex Music Api
  description: "Swagger документация для Yandex Music API."
  version: 1.0.0
servers:
  - url: https://api.music.yandex.net:443/
  - url: http://api.music.yandex.net:443/
tags:
  - name: "user"
  - name: "tracks"
  - name: "albums"
  - name: "playlists"
  - name: "landing"
  - name: "artists"

paths:
  /account/status:
    description: Get account status for current user
    get:
      tags:
        - "account"
      security:
        - oAuth: []
      responses:
        200:
          description: Ok
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  invocationInfo:
                    type: object
                    $ref: '#/components/schemas/InvocationInfo'
                  result:
                    type: object
                    $ref: '#/components/schemas/Status'
        400:
          description: Bad Request
          content: {}
  /feed:
    get:
      security:
        - oAuth: []
      responses:
        200:
          description: Ok
          content: {}

  /albums/{albumId}/:
    parameters:
      - in: path
        name: albumId
        schema:
          type: number
        required: true
        example: 7019818
    get:
      tags:
        - "albums"
      responses:
        200:
          description: Ok
          content: {}

  /albums/{albumId}/with-tracks:
    parameters:
      - in: path
        name: albumId
        schema:
          type: number
        required: true
        example: 7019818
    get:
      tags:
        - "albums"
      responses:
        200:
          description: Ok
          content: {}

  /albums:
    post:
      tags:
        - "albums"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
            example: '{"album-ids" : "13984185,13730064,13963354,13546288,13937809"}'
      responses:
        200:
          description: Ok
          content: {}

  /landing3:
    parameters:
      - in: query
        name: blocks
        schema:
          type: string
          description: Одно или несколько значений блоков, разделенных запятой "promotions","new-releases","new-playlists","mixes","chart","playlists","play_contexts","podcasts"
        examples:
          single:
            value: "new-releases"
          multiple:
            value: "new-playlists, new-playlists"
    get:
      tags:
        - "landing"
      security:
        - oAuth: []
      responses:
        200:
          description: Ok
          content: {}
          headers:
            "X-Yandex-Music-Device":
              schema:
                type: string
                description: Данные заголовок использует Windows приложение Yandex.Music, если пользователь не авторизован
                example: "os=unknown; os_version=unknown; manufacturer=unknown; model=unknown; clid=; device_id=unknown; uuid=unknown"

  /landing3/{landingBlock}:
    parameters:
      - in: path
        name: landingBlock
        required: true
        schema:
          type: string
          enum:
            [
              "new-playlists",
              "new-releases",
              "new-playlists",
              "chart",
              "podcasts",
            ]

  /landing3/chart/{chartType}:
    parameters:
      - in: path
        name: chartType
        required: true
        schema:
          type: string
          enum: ["russia", "world"]
    get:
      tags:
        - "landing"
      responses:
        200:
          description: Ok
          content: {}

  /genres:
    get:
      responses:
        200:
          description: Ok
          content: {}

  /playlists/list:
    description: Получение полной информации о плейлистах по их идентификатору
    parameters:
      - in: query
        name: playlistIds
        description: uid владельца плейлиста и kind плейлиста через двоеточие и запятую
        schema:
          type: string
          example: 103372440:1878,460140864:1000
    post:
      tags:
        - "playlists"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
              example: '{"playlistIds": "103372440:1878,460140864:1000"}'
      responses:
        200:
          description: Ok
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  invocationInfo:
                    type: object
                    $ref: '#/components/schemas/InvocationInfo'
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Playlist'
        400:
          description: Bad Request
          content: {}

  /search:
    parameters:
      - in: query
        name: text
        description: Текст запроса
        schema:
          type: string
          example: Король и Шут
      - in: query
        name: page
        description: Номер страницы выдачи
        schema:
          type: number
          example: 0
      - in: query
        name: type
        schema:
          type: string
          enum: ["artist", "album", "track", "podcast", "all"]
          default: "all"
      - in: query
        name: nococrrect
        schema:
          type: boolean
          default: false
    get:
      responses:
        200:
          description: Ok
          content: {}

  /users/{userId}/playlists/list:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
    get:
      tags:
        - "user"
        - "playlists"
      security:
        - oAuth: []
      responses:
        200:
          description: Ok
          content: {}
        405:
          description: "Method Not Allowed"
          content: {}

  /users/{userId}/playlists/{kind}:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
      - in: path
        required: true
        name: kind
        description: Идентификатор плейлиста
        schema:
          type: number
          example: 1000
    get:
      tags:
        - "user"
        - "playlists"
      security:
        - oAuth: []
      responses:
        200:
          description: Ok
          content: {}

  /users/{userId}/playlists:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
      - in: query
        required: true
        name: kinds
        schema:
          type: string
          example: "1000,1003"
      - in: query
        required: true
        name: mixed
        schema:
          type: boolean
          example: false
      - in: query
        required: true
        name: rich-tracks
        schema:
          type: boolean
          example: false
    get:
      tags:
        - "user"
        - "playlists"
      security:
        - oAuth: []
      responses:
        200:
          description: Ok
          content: {}

  /users/{userId}/playlists/create:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
    post:
      tags:
        - "user"
        - "playlists"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
              example: '{"title" : "Название плейлиста", "visibility": "public"}'
      responses:
        200:
          description: Ok
        400:
          description: Bad Request
        401:
          description: Unauthorized

  /users/{userId}/playlists/{kind}/name:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
      - in: path
        required: true
        name: kind
        description: Идентификатор плейлиста
        schema:
          type: number
          example: 1000
    post:
      tags:
        - "user"
        - "playlists"
      security:
        - oAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
            # TODO: test
            example: '{"value" : "new-name"}'
      responses:
        200:
          description: Ok
          content: {}

  /users/{userId}/playlists/{kind}/delete:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
      - in: path
        required: true
        name: kind
        description: Идентификатор плейлиста
        schema:
          type: number
          example: 1000
    delete:
      tags:
        - "user"
        - "playlists"
      security:
        - oAuth: []
      responses:
        200:
          description: Ok
          content: {}

  # TODO: Complete
  /users/{userId}/playlists/{kind}/change-relative:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
      - in: path
        required: true
        name: kind
        description: Идентификатор плейлиста
        schema:
          type: number
          example: 1000
    post:
      tags:
        - "user"
        - "playlists"
      responses:
        200:
          description: Ok
          content: {}

  /users/{userId}/likes/tracks/add-multiple:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
    post:
      tags:
        - "user"
        - "tracks"
      security:
        - oAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
            example: '{"track-ids" : "7019818,29238706"}'
      responses:
        200:
          description: Ok
          content: {}
        401:
          description: Unauthorized
          content: {}

  /users/{userId}/likes/tracks/remove:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
    post:
      tags:
        - "user"
        - "tracks"
      security:
        - oAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
            example: '{"track-ids" : "7019818,29238706"}'
      responses:
        200:
          description: Ok
          content: {}
        401:
          description: Unauthorized
          content: {}

  /users/{userId}/likes/tracks:
    parameters:
      - in: path
        required: true
        name: userId
        description: Идентификатор пользователя
        schema:
          type: number
          example: 541320800
    get:
      tags:
        - "user"
        - "tracks"
      responses:
        200:
          description: Ok
          content: {}

  /tracks/:
    post:
      tags:
        - "tracks"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
              example: '{"track-ids": "7019818,29238706", "with-positions": false}'
      responses:
        200:
          description: Ok
          content: {}
        400:
          description: Bad Request
          content: {}

  /tracks/{trackId}/download-info:
    parameters:
      - in: path
        required: true
        name: trackId
        schema:
          type: string
          example: "78550148"
    get:
      tags:
        - "user"
        - "tracks"
      responses:
        200:
          description: Ok
          content: {}

  /artists/{artistId}/track-ids-by-rating:
    parameters:
      - in: path
        required: true
        name: artistId
        schema:
          type: string
          example: 218099
    get:
      tags:
        - "artists"
      responses:
        200:
          description: Ok
          content: {}

  /artists/{artistId}/brief-info:
    parameters:
      - in: path
        required: true
        name: artistId
        schema:
          type: string
          example: 218099
    get:
      tags:
        - "artists"
      responses:
        200:
          description: Ok
          content: {}

  /artists/{artistId}/tracks:
    parameters:
      - in: path
        required: true
        name: artistId
        schema:
          type: string
          example: 218099
      - in: query
        required: false
        name: page
        schema:
          type: number
          example: 0
      - in: query
        required: false
        name: page-size
        schema:
          type: number
          example: 20
    get:
      tags:
        - "artists"
      responses:
        200:
          description: Ok
          content: {}

  /artists/{artistId}/direct-albums:
    parameters:
      - in: path
        required: true
        name: artistId
        schema:
          type: string
          example: 218099
      - in: query
        required: false
        name: page
        schema:
          type: number
          example: 0
      - in: query
        required: false
        name: page-size
        schema:
          type: number
          example: 20
      - in: query
        required: false
        name: sort-by
        schema:
          type: string
          enum:
            - "year"
            - "rating"
    get:
      tags:
        - "artists"
      responses:
        200:
          description: Ok
          content: {}

components:
  securitySchemes:
    oAuth:
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        password:
          tokenUrl: https://oauth.yandex.ru/token
          scopes: {}
  schemas:
    InvocationInfo:
      $ref: '/src/models/InvocationInfo.yaml'
    Account:
      type: object
      description: Основная информация об аккаунте
      properties:
        now:
          type: string
          description: Текущая дата и время
          example: "2021-03-17T18:13:40+00:00"
        uid:
          type: number
          description: Уникальный идентификатор
        login:
          type: string
          description: Виртуальное имя (обычно e-mail)
        region:
          type: number
          description: Регион
        fullName:
          type: string
          description: Полное имя (имя и фамилия)
        secondName:
          type: string
          description: Фамилия
        firstName:
          type: string
          description: Имя
        displayName:
          type: string
          description: Отображаемое имя
        serviceAvailable:
          type: boolean
          description: Доступен ли сервис
        hostedUser:
          type: boolean
          description: Является ли пользователем чьим-то другим
        "passport-phones":
          type: array
          description: Мобильные номера
          items:
            type: object
            properties:
              phone:
                type: string 
    Album:
      type: object
      properties:
        id:
          type: number
        error:
          description: Getting album error
          type: string
          nullable: true
        title:
          type: string
        "type":
          type: string
          enum: ["single", "podcast"]
        metaType:
          type: string
          enum: ["single", "podcast", "music"]
        year:
          description: Release year
          type: number
        releaseDate:
          description: Release date in ISO 8601 format
          type: string
        coverUri:
          type: string
        ogImage:
          type: string
        genre:
          description: Music genre
          type: string
        buy:
          type: array
          items:
            type: object
        trackCount:
          type: number
        recent:
          description: Is new album
          type: boolean
        veryImportant:
          description: Whether album is popular for listeners
          type: boolean
        artists:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Artist'
        labels:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
              name:
                type: string
        available:
          type: boolean
        availableForPremiumUsers:
          type: boolean
        availableForMobile:
          type: boolean
        availablePartially:
          type: boolean
        bests:
          description: the best tracks ids
          type: array
          items:
            type: number
        prerolls:
          type: array
          items:
            type: object
        volumes:
          description: Треки альбома, разделенные по дискам.
          type: array
          nullable: true
          items:
            type: array
            items:
              type: object
              $ref: '#/components/schemas/Track'
    Artist:
      type: object
      properties:
        composer:
          type: boolean
        cover:
          type: object
          nullable: true
          $ref: '#/components/schemas/Cover'
        decomposed:
          type: array
          nullable: true
          items:
            type: object
        genres:
          type: array
          items:
            type: object
        id:
          type: string
        name:
          type: string
        various:
          type: boolean
        popularTracks:
          type: array
          nullable: true
          items:
            type: object
            $ref: '#/components/schemas/Track'
        ticketsAvailable:
          description: Имеются ли в продаже билеты на концерт
          nullable: true
          type: boolean
        regions:
          type: array
          nullable: true
          items:
            type: string
    Cover:
      type: object
      properties:
        custom:
          type: boolean
          nullable: true
        dir:
          type: string
          nullable: true
        "type":
          nullable: true
          type: string
          enum: ["pic", "mosaic"]
        itemsUri:
          type: array
          nullable: true
          items: 
            type: string
        uri:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
        error:
          type: string
          nullable: true
          description: If exists other properties is missing
    Owner:
      type: object
      properties:
        login:
          type: string
        name:
          type: string
        sex:
          type: string
        uid:
          type: number
        verified:
          type: boolean
    Track:
      type: object
      properties:
        albums:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Album'
        artists:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Artist'
        available:
          type: boolean
        availableForPremiumUsers:
          type: boolean 
        availableFullWithoutPermission:
          type: boolean
        coverUri:
          description: Cover uri template
          type: string
        durationMs:
          type: number
        fileSize:
          type: number 
        id:
          type: string
        lyricsAvailable:
          type: boolean
        major:
          type: object
          properties:
            id:
              type: number
            name:
              type: string
        normalization:
          type: object
          properties:
            gain:
              type: number
            peak:
              type: number
        ogImage:
          type: string
        previewDurationMs:
          type: number
        realId:
          type: string
        rememberPosition:
          type: boolean
        storageDir:
          type: string
        title:
          type: string
        type:
          type: string
    TrackItem:
      type: object
      properties:
        id:
          type: number
        playCount:
          type: number
        recent:
          type: boolean
        timestamp:
          type: string
        track:
          description: Null when tracks are not riched
          type: object
          $ref: '#/components/schemas/Track'
    Playlist: 
      description: play list data
      type: object
      properties:
        playlistUuid:
          type: string
        description:
          type: string
        descriptionFormatted:
          type: string
        available:
          type: boolean
        collective:
          type: boolean
        cover:
          type: object
          $ref: '#/components/schemas/Cover'
        created:
          type: string
        modified:
          type: string
        backgroundColor:
          type: string
        textColor:
          type: string
        durationMs:
          type: number
        isBunner:
          type: boolean
        isPremiere:
          type: boolean
        kind:
          type: number
        ogImage:
          type: string
        owner:
          type: object
          $ref: '#/components/schemas/Owner'
        prerolls:
          type: array
          items:
            type: object
        revision:
          type: number
        snapshot:
          type: number
        tags:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              value:
                type: string
        title:
          type: string
        trackCount:
          type: number
        uid:
          type: number
        visibility:
          type: string
          enum: ["public", "private"]
        likesCount:
          type: number
        tracks:
          type: array
          nullable: true
          items:
            type: object
            $ref: '#/components/schemas/TrackItem' 
    Status:
      type: object
      properties:
        account:
          type: object
          $ref: '#/components/schemas/Account'
        permissions:
          type: object
          $ref: '#/components/schemas/Permissions'
        subscription:
          type: object
          $ref: '#/components/schemas/Subscription'
        subeditor:
          type: boolean
          description: Наличие статуса модератора проверки корректности информации
        subeditorLevel:
          type: number
          description: Уровень статуса модератора
        pretrialActive:
          type: boolean
        plus:
          type: object
          description: Информация о Plus подписке
          properties:
            hasPlus:
              type: boolean
            isTutorialCompleted:
              type: boolean
        defaultEmail:
          type: string
          description: Основной e-mail адрес аккаунта
          example: "email@example.com"
        barBelow:
          type: object
          description: Блок с предупреждениями о конце подписки и подарках
          $ref: '#/components/schemas/Alert'
    Permissions:
      type: object
      description: Информация о правах пользователя, их изначальных значениях и даты окончания
      properties:
        until:
          type: string
          example: "2021-03-24T18:13:40+00:00"
        values:
          type: array
          items:
            enum: ["landing-play","feed-play","radio-play","mix-play","radio-skips","play-radio-full-tracks"]
        default:
          type: array
          items:
            enum: ["landing-play","feed-play","radio-play","mix-play","radio-skips","play-radio-full-tracks"]
    Subscription:
      type: object
      description: Информация о подписках пользователя
      properties:
        hadAnySubscription:
          type: boolean
        canStartTrial:
          type: boolean
        mcdonalds:
          type: boolean
    Alert:
      type: object
      description: Блок с предупреждениями о конце подписки и подарках
      properties:
        alertId:
          type: string
          description: Уникальный идентификатор
        text:
          type: string
          description: Текст предупреждения
        bgColor:
          type: string
          description: Цвет заднего фона (HTML)
        textColor:
          type: string
          description: Цвет текста (HTML)
        alertType:
          type: string
          description: Тип предупреждения
          example: "Promo_rk360"
        button:
          type: object
          $ref: '#/components/schemas/AlertButton'
        closeButton:
          type: boolean
          description: Наличие кнопки "Закрыть"
    AlertButton:
      type: object
      description: кнопка со ссылкой
      properties:
        text:
          type: string
          description: Текст на кнопке
        bgColor:
          type: string
          description: Цвет заднего фона (HTML)
        textColor:
          type: string
          description: Цвет текста (HTML)
        uri:
          type: string
          description: Ссылка, куда ведет кнопка